launch-templates:
  # Custom template name, the name is referenced via --distribute-on="3 tailwind-linux-rust"
  tailwind-linux-rust:
    resource-class: 'docker_linux_amd64/large'
    image: 'ubuntu22.04-node20.11-v9'
    init-steps:
      - name: Checkout
        uses: 'nrwl/nx-cloud-workflows/v4/workflow-steps/checkout/main.yaml'
      - name: Restore Node Modules Cache
        uses: 'nrwl/nx-cloud-workflows/v4/workflow-steps/cache/main.yaml'
        inputs:
          key: 'package-lock.json|yarn.lock|pnpm-lock.yaml'
          paths: 'node_modules'
          base-branch: 'next'
      - name: Restore Browser Binary Cache
        uses: 'nrwl/nx-cloud-workflows/v3.6/workflow-steps/cache/main.yaml'
        env:
          KEY: 'package-lock.json|yarn.lock|pnpm-lock.yaml|"browsers"'
          PATHS: |
            '../.cache/ms-playwright'
          BASE_BRANCH: 'next'
      - name: Install Rust
        script: |
          curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env"
          rustup toolchain install stable
          # persist cargo bin into PATH
          echo "PATH=$HOME/.cargo/bin:$PATH" >> $NX_CLOUD_ENV
      - name: Install Node Modules
        uses: 'nrwl/nx-cloud-workflows/v4/workflow-steps/install-node-modules/main.yaml'
      - name: Install Browsers (if needed)
        uses: 'nrwl/nx-cloud-workflows/v3.6/workflow-steps/install-browsers/main.yaml'

  tailwind-windows-rust:
    resource-class: 'windows/medium'
    image: 'windows-2022'
    init-steps:
      - name: Checkout
        uses: 'nrwl/nx-cloud-workflows/v4/workflow-steps/checkout/main.yaml'
      - name: Restore Node Modules Cache
        uses: 'nrwl/nx-cloud-workflows/v4/workflow-steps/cache/main.yaml'
        inputs:
          key: 'package-lock.json|yarn.lock|pnpm-lock.yaml'
          paths: 'node_modules'
          base-branch: 'next'
      - name: Restore Browser Binary Cache
        uses: 'nrwl/nx-cloud-workflows/v3.6/workflow-steps/cache/main.yaml'
        env:
          KEY: 'package-lock.json|yarn.lock|pnpm-lock.yaml|"browsers"'
          PATHS: |
            '../.cache/ms-playwright'
          BASE_BRANCH: 'next'
      - name: Install Rust
        script: |
          Write-Host "Installing Rust..."
          $exePath = "$env:TEMP\rustup-init.exe"

          #
          # TODO: is there any reason why we should not use the gnu compiler?
          #
          # The mvsc linker requires visual studio code dev tools and installation 
          # seems non trivial in a CI environment. Maybe we could bake this into the 
          # image?
          #
          # see: https://gist.github.com/mmozeiko/7f3162ec2988e81e56d5c4e22cde9977
          #
          Write-Host "Downloading..."
          (New-Object Net.WebClient).DownloadFile('https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-gnu/rustup-init.exe', $exePath)

          Write-Host "Installing..."
          cmd /c start /wait $exePath -y
          Remove-Item $exePath

          Write-Host "Path is:"
          $env:Path
          Write-Host "--------------"
          $env:Path += ";$env:USERPROFILE\.cargo\bin"
          Write-Host "Path is (with cargo added):"
          $env:Path
          Write-Host "--------------"

          Write-Host "NX_CLOUD_ENV is:"
          Get-Content -Path $env:NX_CLOUD_ENV
          Write-Host "--------------"

          Add-Content -Path $env:NX_CLOUD_ENV -Value "PATH=$env:Path"

          Write-Host "NX_CLOUD_ENV (with path) is:"
          Get-Content -Path $env:NX_CLOUD_ENV
          Write-Host "--------------"

          # TODO: remove if gnu rustup-init works
          # Write-Host "Installing toolchain..."
          # rustup toolchain install stable-x86_64-pc-windows-gnu
          # rustup default stable-x86_64-pc-windows-gnu

          cargo --version
          rustup --version
          rustc --version

          Write-Host "Rust installed"

      - name: Install Node Modules
        uses: 'nrwl/nx-cloud-workflows/v4/workflow-steps/install-node-modules/main.yaml'
      - name: Install Browsers (if needed)
        uses: 'nrwl/nx-cloud-workflows/v3.6/workflow-steps/install-browsers/main.yaml'
