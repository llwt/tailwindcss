name: CI

on:
  push:
    branches: [next]
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  dte:
    name: (${{ matrix.nx_ci_execution_env }}) DTE
    strategy:
      fail-fast: false
      matrix:
        node-version: [20]
        os: [ubuntu-latest, windows-latest, macos-14]
        include:
          - os: ubuntu-latest
            nx_ci_execution_env: linux
            nx_ci_validation_targets: build,lint,test,test:ui,integration-test
          - os: windows-latest
            nx_ci_execution_env: windows
            nx_ci_validation_targets: build,test,test:ui,integration-test
          - os: macos-14
            nx_ci_execution_env: macos
            nx_ci_validation_targets: build,test,test:ui,integration-test

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    env:
      NX_CI_EXECUTION_ENV: ${{ matrix.nx_ci_execution_env }}
      NX_BRANCH: ${{ github.event.pull_request.head.ref || github.ref }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4

      # For now, only run linux tasks on agents
      # Mac is not supported, and windows requires
      # some more refinement to get working
      - if: matrix.nx_ci_execution_env == 'linux'
        run: >
          pnpm dlx nx-cloud start-ci-run
          --distribute-on="3 tailwind-${{ matrix.nx_ci_execution_env }}-rust" 
          --stop-agents-on-failure=false
          --stop-agents-after="integration-test"

      - if: matrix.nx_ci_execution_env != 'linux'
        run: >
          pnpm dlx nx-cloud start-ci-run
          --stop-agents-on-failure=false
          --stop-agents-after="integration-test"

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'next'

      # We only run this on linux since there is no reason to check this multiple times
      #
      # TODO: run this in parallel with nx afffected
      # See: https://nx.dev/ci/recipes/enterprise/dte/github-dte
      - if: matrix.nx_ci_execution_env == 'linux'
        name: Format Check
        run: pnpm exec nx-cloud record -- nx format:check
        env:
          NX_CLOUD_DISTRIBUTED_EXECUTION: false

      - name: Run affected validation tasks
        run: pnpm exec nx affected -t="${{ matrix.nx_ci_validation_targets }}" --exclude="*playground*"

  dte-agent:
    name: (${{ matrix.nx_ci_execution_env }}) DTE Agent ${{ matrix.agent_number }}
    runs-on: macos-14
    timeout-minutes: 30

    env:
      NX_CI_EXECUTION_ENV: ${{ matrix.nx_ci_execution_env}}
      NX_BRANCH: ${{ github.event.pull_request.head.ref || github.ref }}

    strategy:
      fail-fast: false
      matrix:
        node-version: [20]
        agent_number: [1, 2, 3]
        os: [windows-latest, macos-14]
        include:
          - os: windows-latest
            nx_ci_execution_env: windows
          - os: macos-14
            nx_ci_execution_env: macos

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      # Cache cargo if Rust
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust (Stable)
        run: rustup default stable

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwrite
        run: pnpm exec playwright install --with-deps

      - name: Start Nx Agent ${{ matrix.agent_number }}
        run: pnpm exec nx-cloud start-agent
        env:
          NX_AGENT_NAME: ${{ matrix.agent_number }}
